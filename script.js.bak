const SUPABASE_URL = 'https://nnssmlllzdnubikllrdg.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5uc3NtbGxsemRudWJpa2xscmRnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU2ODA3OTcsImV4cCI6MjA3MTI1Njc5N30.ayPyC8nuEiBwtA4ncoPtGSZFioWnvmB607NtySzdFuw';

const supabaseClient = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

class ReignsGame {
    constructor() {
        this.stats = {
            mental: 50,
            finance: 50,
            ability: 30,
            confidence: 50,
            health: 50
        };
        
        this.age = 25;
        this.week = 1;
        this.totalWeeks = 1;
        this.gameOver = false;
        this.currentEvent = null;
        this.gameStarted = false;
        this.recentEvents = [];
        this.endingQuestActive = false;
        this.endingQuestStep = 0;
        this.endingQuestResults = [];
        this.score = 0;
        
        this.setupDOMReferences();
        this.initializeGame();
        this.setupEventListeners();
    }

    setupDOMReferences() {
        this.introScreen = document.getElementById('intro-screen');
        this.startButton = document.getElementById('start-button');
        this.eventCard = document.getElementById('event-card');
        this.cardImage = document.getElementById('card-image');
        this.cardTitle = document.getElementById('card-title');
        this.cardDescription = document.getElementById('card-description');
        this.turnCount = document.getElementById('turn-count');
        this.gameStatus = document.getElementById('game-status');
        this.resultCard = document.getElementById('result-card');
        this.resultTitle = document.getElementById('result-title');
        this.resultMessage = document.getElementById('result-message');
        this.resultStats = document.getElementById('result-stats');
        this.confirmButton = document.getElementById('confirm-button');
        this.leaderboardButton = document.getElementById('leaderboard-button');
        this.nameModalOverlay = document.getElementById('name-modal-overlay');
        this.leaderboardModalOverlay = document.getElementById('leaderboard-modal-overlay');
        this.playerNameInput = document.getElementById('player-name-input');
        this.submitScoreButton = document.getElementById('submit-score-button');
        this.closeLeaderboardButton = document.getElementById('close-leaderboard-button');
        this.leaderboardList = document.getElementById('leaderboard-list');
        this.finalScoreDisplay = document.getElementById('final-score-display');
        this.leftHint = document.getElementById('left-hint');
        this.rightHint = document.getElementById('right-hint');
        this.scheduleTrack = document.getElementById('schedule-track');
    }
    
    initializeGame() {
        this.updateStatsDisplay();
        this.initializeScheduleBar();
    }
    
    setupEventListeners() {
        this.startButton.addEventListener('click', () => this.startGame());
        this.leaderboardButton.addEventListener('click', () => this.showLeaderboard());
        this.submitScoreButton.addEventListener('click', () => this.saveScore());
        this.closeLeaderboardButton.addEventListener('click', () => {
            this.leaderboardModalOverlay.style.display = 'none';
            if (this.gameOver) {
                this.restartGame();
            }
        });

        this.eventCard.addEventListener('mousedown', e => this.handleMouseDown(e));
        document.addEventListener('mousemove', e => this.handleMouseMove(e));
        document.addEventListener('mouseup', e => this.handleMouseUp(e));
        this.eventCard.addEventListener('touchstart', e => this.handleTouchStart(e), { passive: false });
        document.addEventListener('touchmove', e => this.handleTouchMove(e), { passive: false });
        document.addEventListener('touchend', e => this.handleTouchEnd(e), { passive: false });
    }

    startGame() {
        this.gameStarted = true;
        this.introScreen.style.display = 'none';
        this.eventCard.style.display = 'block';
        document.getElementById('schedule-bar').style.display = 'block';
        this.loadEvent();
    }

    handleMouseDown(e) { if (this.gameStarted && !this.isDragging) this.startDrag(e.clientX); }
    handleMouseMove(e) { if (this.isDragging) this.updateDrag(e.clientX); }
    handleMouseUp() { if (this.isDragging) this.endDrag(); }
    handleTouchStart(e) { if (this.isDragging) return; if (e.target.closest('#event-card')) e.preventDefault(); this.startDrag(e.touches[0].clientX); }
    handleTouchMove(e) { if (this.isDragging) { e.preventDefault(); this.updateDrag(e.touches[0].clientX); } }
    handleTouchEnd() { if (this.isDragging) this.endDrag(); }

    startDrag(x) {
        this.isDragging = true;
        this.startX = x;
        this.eventCard.style.transition = 'none';
        this.eventCard.style.cursor = 'grab';
    }

    updateDrag(x) {
        this.currentX = x;
        const deltaX = this.currentX - this.startX;
        const rotate = deltaX * 0.1;
        this.eventCard.style.transform = `translateX(${deltaX}px) rotate(${rotate}deg)`;
    }

    endDrag() {
        this.isDragging = false;
        const deltaX = this.currentX - this.startX;
        if (Math.abs(deltaX) > 50) {
            this.makeChoice(deltaX > 0 ? 'right' : 'left');
        } else {
            this.eventCard.style.transition = 'transform 0.3s';
            this.eventCard.style.transform = 'translateX(0) rotate(0deg)';
        }
    }

    makeChoice(choice) {
        if (this.gameOver) return;
        this.eventCard.style.transition = 'transform 0.5s';
        this.eventCard.style.transform = `translateX(${choice === 'left' ? -1000 : 1000}px) rotate(${choice === 'left' ? -30 : 30}deg)`;
        setTimeout(() => this.applyChoice(choice), 200);
    }

    applyChoice(choice) {
        const effects = this.currentEvent.effects[choice];
        for (const stat in effects) {
            this.stats[stat] = Math.max(0, Math.min(100, this.stats[stat] + effects[stat]));
        }
        this.totalWeeks++;
        this.week = (this.totalWeeks - 1) % 52 + 1;
        this.age = 25 + Math.floor((this.totalWeeks - 1) / 52);
        this.updateStatsDisplay();
        this.checkGameOverConditions();
        if (!this.gameOver) {
            this.showResultCard(choice, effects);
        }
    }

    showResultCard(choice, effects) {
        this.eventCard.style.display = 'none';
        this.resultCard.style.display = 'block';
        this.resultTitle.textContent = this.currentEvent.title;
        this.resultMessage.textContent = this.currentEvent.resultMessages ? this.currentEvent.resultMessages[choice] : '';
        this.showResultStats(effects);
        this.confirmButton.onclick = () => this.confirmResult();
    }

    confirmResult() {
        this.resultCard.style.display = 'none';
        this.eventCard.style.transform = 'translateX(0) rotate(0deg)';
        this.eventCard.style.display = 'block';
        this.loadEvent();
    }

    showResultStats(effects) {
        this.resultStats.innerHTML = '';
        for (const [stat, change] of Object.entries(effects)) {
            if (change === 0) continue;
            const statItem = document.createElement('div');
            statItem.className = 'result-stat-item';
            statItem.innerHTML = `<span class="result-stat-icon">${this.getStatIcon(stat)}</span> <span class="result-stat-value ${change > 0 ? 'positive' : 'negative'}">${change > 0 ? '+' : ''}${change}</span> <span>${this.getStatName(stat)}</span>`;
            this.resultStats.appendChild(statItem);
        }
    }

    getStatName(stat) {
        const names = { mental: '정신력', finance: '재정', ability: '역량', confidence: '자신감', health: '체력' };
        return names[stat] || stat;
    }

    getStatIcon(stat) {
        const icons = { mental: '🧠', finance: '💰', ability: '⚡', confidence: '💪', health: '❤️' };
        return icons[stat] || '❓';
    }

    updateStatsDisplay() {
        for (const stat in this.stats) {
            document.getElementById(`${stat}-fill`).style.width = `${this.stats[stat]}%`;
            document.getElementById(`${stat}-value`).textContent = this.stats[stat];
            document.querySelector(`[id="${stat}-bar"]`).closest('.stat-item').classList.toggle('danger', this.stats[stat] <= 20);
        }
        this.turnCount.textContent = `${this.age}살 (${this.week}주차)`;
        this.updateScheduleBar();
    }

    initializeScheduleBar() {
        if (!this.scheduleTrack) return;
        this.scheduleTrack.innerHTML = '';
        for (let week = 1; week <= 52; week++) {
            const marker = document.createElement('div');
            marker.className = 'schedule-marker';
            marker.dataset.week = week;
            marker.style.left = `${((week - 1) / 51) * 100}%`;
            if (week === 22 || week === 44) {
                marker.classList.add('recruitment');
            }
            this.scheduleTrack.appendChild(marker);
        }
        this.updateScheduleBar();
    }

    updateScheduleBar() {
        if (!this.scheduleTrack) return;
        this.scheduleTrack.querySelectorAll('.schedule-marker').forEach(m => m.classList.remove('current'));
        const currentMarker = this.scheduleTrack.querySelector(`[data-week="${this.week}"]`);
        if (currentMarker) currentMarker.classList.add('current');
    }

    checkGameOverConditions() {
        for (const stat in this.stats) {
            if (this.stats[stat] <= 0) {
                this.endGame(false, stat);
                return;
            }
        }
        if (this.stats.ability >= 100 && (this.week === 22 || this.week === 44)) {
             this.endGame(true);
        }
    }

    endGame(isSuccess, reason = '') {
        this.gameOver = true;
        this.eventCard.style.display = 'none';
        this.resultCard.style.display = 'none';
        this.score = this.calculateScore(isSuccess);
        this.showNameModal(this.score);
    }

    calculateScore(isSuccess) {
        const totalStats = Object.values(this.stats).reduce((sum, stat) => sum + stat, 0);
        const successBonus = isSuccess ? 500 : 0;
        return Math.round((totalStats * 2) - (this.totalWeeks * 3) + successBonus);
    }

    showNameModal(score) {
        this.finalScoreDisplay.textContent = score;
        this.nameModalOverlay.style.display = 'flex';
    }

    async saveScore() {
        this.submitScoreButton.disabled = true;
        this.submitScoreButton.textContent = '등록 중...';
        const name = this.playerNameInput.value.trim() || '익명의 도전자';
        const { error } = await supabaseClient.from('score').insert([{ name, score: this.score }]);
        if (error) {
            console.error('점수 저장 실패:', error);
            alert('점수 등록에 실패했습니다.');
            this.submitScoreButton.disabled = false;
            this.submitScoreButton.textContent = '점수 등록';
        } else {
            this.nameModalOverlay.style.display = 'none';
            this.showLeaderboard();
        }
    }

    async showLeaderboard() {
        this.leaderboardModalOverlay.style.display = 'flex';
        this.leaderboardList.innerHTML = '<li>로딩 중...</li>';
        const { data, error } = await supabaseClient.from('score').select('name, score').order('score', { ascending: false }).limit(10);
        if (error) {
            this.leaderboardList.innerHTML = '<li>리더보드를 불러오는 데 실패했습니다.</li>';
        } else {
            this.leaderboardList.innerHTML = '';
            if (data.length === 0) {
                this.leaderboardList.innerHTML = '<li>아직 등록된 점수가 없습니다.</li>';
            } else {
                data.forEach((entry, index) => {
                    const li = document.createElement('li');
                    li.innerHTML = `<span class="rank">${index + 1}위</span> <span class="name">${entry.name}</span> <span class="score">${entry.score}점</span>`;
                    this.leaderboardList.appendChild(li);
                });
            }
        }
    }

    restartGame() {
        window.location.reload();
    }
    
    loadEvent() {
        const events = [
            { title: "포트폴리오 제작", description: "게임 포트폴리오를 만들까 고민이 됩니다.\n어떻게 하시겠습니까?", image: "images/portfolio.png", prob: 1, choices: { left: "제작한다.", right: "다음 기회로 미룬다." }, effects: { left: { ability: 5, mental: -5, finance: -5}, right: { ability: -3, mental: +5 } }, resultMessages: { left: "포트폴리오를 정성스럽게 제작했습니다.", right: "다음 기회로 미뤘습니다." } },
            { title: "온라인 강의", description: "게임 개발 온라인 강의를 들을 기회가 있습니다.\n어떻게 하시겠습니까?", image: "images/online.png", prob: 2, choices: { left: "고급 강의 수강", right: "무료 강의 수강" }, effects: { left: { ability: 8, finance: -10, mental: -5 }, right: { ability: 4 } }, resultMessages: { left: "역량이 크게 향상되었습니다.", right: "안정적으로 역량을 향상시켰습니다." } },
            { title: "개인 프로젝트", description: "개인 게임 프로젝트를 시작할 수 있습니다.\n어떻게 하시겠습니까?", image: "images/portfolio.png", prob: 1, choices: { left: "대규모 프로젝트", right: "간단한 프로젝트" }, effects: { left: { ability: 8, mental: -10, health: -5 }, right: { ability: 4, mental: -4 } }, resultMessages: { left: "역량이 크게 향상되었습니다.", right: "적당한 역량 향상을 경험했습니다." } },
            { title: "알바 제안", description: "생활비를 벌기 위한 알바 제안이 들어왔습니다.\n어떻게 하시겠습니까?", image: "images/money.png", prob: 2, choices: { left: "아르바이트를 한다.", right: "아르바이트를 하지 않는다." }, effects: { left: { finance: 10, mental: -5, ability: -5 }, right: { finance: -5 } }, resultMessages: { left: "재정이 개선되었습니다.", right: "역량 향상에 집중할 수 있습니다." } },
            { title: "면접 연습", description: "게임 회사 면접을 위한 모의 면접을 연습할 수 있습니다.\n어떻게 하시겠습니까?", image: "images/interview.png", prob: 0.5, choices: { left: "전문가와 연습", right: "혼자 연습" }, effects: { left: { confidence: 8, mental: -10, ability: 8 }, right: { confidence: 3, ability: 3 } }, resultMessages: { left: "자신감과 역량이 크게 향상되었습니다.", right: "기본적인 역량 향상을 경험했습니다." } },
            { title: "게임 잼 참가", description: "게임 잼에 참가하여 실력을 키울 수 있습니다.\n어떻게 하시겠습니까?", image: "images/portfolio.png", prob: 0.5, choices: { left: "팀으로 참가", right: "개인으로 참가" }, effects: { left: { ability: 8, mental: -10, confidence: 5 }, right: { ability: 4 } }, resultMessages: { left: "역량과 자신감이 크게 향상되었습니다.", right: "적당한 역량 향상을 경험했습니다." } },
            { title: "운동 시간", description: "체력을 기르기 위한 운동을 할 수 있습니다.\n어떻게 하시겠습니까?", image: "images/health.png", prob: 1, choices: { left: "격렬한 운동", right: "가벼운 운동" }, effects: { left: { health: 8, mental: -5 }, right: { health: 4, mental: 2 } }, resultMessages: { left: "체력이 크게 향상되었습니다.", right: "체력과 정신력이 모두 향상되었습니다." } },
            { title: "친구와의 만남", description: "친구들과 만나서 스트레스를 해소할 수 있습니다.\n어떻게 하시겠습니까?", image: "images/friend_success.png", prob: 1, choices: { left: "친구들과 만난다.", right: "혼자 시간을 보낸다." }, effects: { left: { mental: 8, finance: -5 }, right: { mental: 3 } }, resultMessages: { left: "정신력이 크게 회복되었습니다.", right: "정신력이 조금 회복되었습니다." } },
            { title: "멘토링", description: "게임 업계 선배와 멘토링을 받을 수 있습니다.\n어떻게 하시겠습니까?", image: "images/mentoring.png", prob: 0.5, choices: { left: "고급 멘토링", right: "무료 멘토링" }, effects: { left: { ability: 8, confidence: 5, finance: -10 }, right: { ability: 4, confidence: 2 } }, resultMessages: { left: "역량과 자신감이 크게 향상되었습니다.", right: "기본적인 역량 향상을 경험했습니다." } },
            { title: "팀 프로젝트", description: "팀 프로젝트에 참여할 기회가 있습니다.\n어떻게 하시겠습니까?", image: "images/team_project.png", prob: 1, choices: { left: "팀장으로 참여", right: "팀원으로 참여" }, effects: { left: { ability: 8, confidence: 5, mental: -8 }, right: { ability: 5, mental: -3 } }, resultMessages: { left: "역량과 자신감이 크게 향상되었습니다.", right: "적당한 역량 향상을 경험했습니다." } },
            { title: "전공 서적 독서", description: "게임 개발 관련 서적을 읽을 수 있습니다.\n어떻게 하시겠습니까?", image: "images/book.png", prob: 1, choices: { left: "고급 서적 읽기", right: "기초 서적 읽기" }, effects: { left: { ability: 6, mental: -5 }, right: { ability: 3, mental: 2 } }, resultMessages: { left: "역량이 향상되었지만 정신력이 소모되었습니다.", right: "역량과 정신력이 모두 향상되었습니다." } },
            { title: "국내 여행", description: "짧은 여행을 통해 스트레스를 해소할 수 있습니다.\n어떻게 하시겠습니까?", image: "images/korea.png", prob: 0.5, choices: { left: "여행을 간다.", right: "집에 머문다." }, effects: { left: { mental: 8, health: 5, finance: -8 }, right: { mental: 3 } }, resultMessages: { left: "정신력과 체력이 크게 회복되었습니다.", right: "정신력이 조금 회복되었습니다." } }
        ];
        
        let availableEvents = events.filter(event => !this.recentEvents.includes(event.title));
        if (availableEvents.length === 0) { this.recentEvents = []; availableEvents = events; }
        this.currentEvent = this.selectEventByProbability(availableEvents);
        this.recentEvents.push(this.currentEvent.title);
        if (this.recentEvents.length > 3) this.recentEvents.shift();

        this.cardImage.src = this.currentEvent.image;
        this.cardTitle.textContent = this.currentEvent.title;
        this.cardDescription.textContent = this.currentEvent.description;
    }

    selectEventByProbability(events) {
        const weights = [];
        let totalWeight = 0;
        for (const event of events) { totalWeight += event.prob || 1; weights.push(totalWeight); }
        const random = Math.random() * totalWeight;
        for (let i = 0; i < weights.length; i++) { if (random < weights[i]) return events[i]; }
        return events[events.length - 1];
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new ReignsGame();
});